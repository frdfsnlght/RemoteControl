
home:
    buttons:
        power: switchToActivity('home')
                
        b1: |
            if devices.btRemote.state.shift == 0:
                switchToActivity('plex')
        b2: |
            if devices.btRemote.state.shift == 0:
                switchToActivity('netflix')
        b3: |
            if devices.btRemote.state.shift == 0:
                switchToActivity('primeVideo')
        b4: |
            if devices.btRemote.state.shift == 0:
                switchToActivity('youtubeTV')

        t0: |
            devices.btRemote.setLEDColors(None, None, None, None, None)
            devices.tcpRemote.setLEDColors(None, None, None, None, None)
        
        t1: |
            devices.btRemote.setLEDColors('blue', 'blue', 'blue', 'blue', 'blue')
            devices.tcpRemote.setLEDColors('blue', 'blue', 'blue', 'blue', 'blue')
        
        shift: |
            devices.btRemote.state.shift = (devices.btRemote.state.shift + 1) % 6
            if devices.btRemote.state.shift == 0:
                devices.btRemote.popLEDColors()
                devices.tcpRemote.popLEDColors()
            else:
                colors = [None, None, None, None, None]
                colors[devices.btRemote.state.shift - 1] = 'orange'
                if devices.btRemote.state.shift == 1:
                    devices.btRemote.pushLEDColors(*colors)
                    devices.tcpRemote.pushLEDColors(*colors)
                else:
                    devices.btRemote.setLEDColors(*colors)
                    devices.tcpRemote.setLEDColors(*colors)
            
        theater:
            hold: 4
            onDown: |
                devices.mqtt.publish('theaterPress')
#                if time() - devices.pjlift.state.time < 60:
#                    logger.info('Stopping projector lift!')
#                    devices.pjlift.request('stop')
#                    devices.htpc.notify('Theater', 'Emergency STOP')
            onHold: |
                devices.mqtt.publish('theaterHold')
#                if activity.id == 'home':
#                    logger.warning('Unable to open or close the theater outside an activity!')
#                    raise Exit()
#                if devices.pjlift.state.open:
#                    logger.info('Closing theater')
#                    devices.htpc.notify('Theater', 'Theater mode CLOSE')
#                    devices.projector.powerOff.press()
#                    devices.vera.runScene('Theater off')
#                    devices.pjlift.state.open = False
#                    devices.pjlift.state.time = time()
#                else:
#                    logger.info('Opening theater')
#                    devices.htpc.notify('Theater', 'Theater mode OPEN')
#                    devices.projector.powerOn.press()
#                    devices.pjlift.state.open = True
#                    devices.pjlift.state.time = time()

    events:
        onActivityBegin: |
            devices.btRemote.popAllLEDColors()
            devices.tcpRemote.popAllLEDColors()
            devices.btRemote.setLEDColors(None, None, None, None, None)
            devices.tcpRemote.setLEDColors(None, None, None, None, None)
            if devices.tv.state.powerOn:
                devices.tv.powerOff.press()
                devices.tv.state.powerOn = False
            if devices.amp.state.powerOn:
                devices.amp.powerStandby()
                devices.amp.state.powerOn = False
                
        BLERemoteConnected: |
            devices.gpio.status.setPWMDutyCycle(1)
        BLERemoteDisconnected: |
            devices.gpio.status.setPWMDutyCycle(0.25)
        TCPRemoteConnected: |
            devices.gpio.status.setPWMDutyCycle(1)
        TCPRemoteDisconnected: |
            devices.gpio.status.setPWMDutyCycle(0.25)

        mediaPlay: |
            devices.mqtt.publish('theaterPlay')
#            if not devices.pjlift.state.open: raise Exit()
#            devices.vera.runScene('Theater Play')
        
        mediaPause: |
            devices.mqtt.publish('theaterPause')
#            if not devices.pjlift.state.open: raise Exit()
#            devices.vera.runScene('Theater Pause')
        
        mediaResume: |
            devices.mqtt.publish('theaterResume')
#            if not devices.pjlift.state.open: raise Exit()
#            devices.vera.runScene('Theater Play')
        
        mediaStop: |
            devices.mqtt.publish('theaterStop')
#            if not devices.pjlift.state.open: raise Exit()
#            devices.vera.runScene('Theater Pause')

        # the following 2 events are for testing
        theaterPress: |
            devices.mqtt.publish('theaterPress')
        theaterHold: |
            devices.mqtt.publish('theaterHold')
        
mainActivityBase:
    basedOn:
        - home
    buttons:
        volumeUp:
            repeat: 0.25 0.75
            onDown: devices.amp.volumeUp()
        volumeDown:
            repeat: 0.25 0.75
            onDown: devices.amp.volumeDown()
        mute:
            onDown: devices.amp.volumeToggleMute()

    events:
        onActivityBegin: |
            if not devices.tv.state.powerOn:
                devices.tv.powerOn.press()
                devices.tv.state.powerOn = True
            if not devices.amp.state.powerOn:
                devices.amp.powerOn()
                devices.amp.state.powerOn = True
                sleep(1.5)
         
htpcBase:
    basedOn:
        - mainActivityBase
    
    events:
        onActivityEnd: |
            devices.htpc.releaseAll()
            
    buttons:
        play:
            onDown: devices.htpc.keyDown('p')
            onUp: devices.htpc.keyUp('p')
        pause:
            onDown: devices.htpc.keyDown('space')
            onUp: devices.htpc.keyUp('space')
        stop:
            onDown: devices.htpc.keyDown('x')
            onUp: devices.htpc.keyUp('x')
        forward:
            onDown: devices.htpc.keyDown('f')
            onUp: devices.htpc.keyUp('f')
        reverse:
            onDown: devices.htpc.keyDown('r')
            onUp: devices.htpc.keyUp('r')
        delete:
            onDown: devices.htpc.keyDown('delete')
            onUp: devices.htpc.keyUp('delete')
        menu:
            onDown: devices.htpc.remoteDown('menu')
            onUp: devices.htpc.remoteUp('menu')
        guide:
            onDown: devices.htpc.keyDown('e')
            onUp: devices.htpc.keyUp('e')
        info:
            onDown: devices.htpc.keyDown('i')
            onUp: devices.htpc.keyUp('i')
        exit:
            onDown: devices.htpc.remoteDown('back')
            onUp: devices.htpc.remoteUp('back')
        up:
            onDown: devices.htpc.remoteDown('up')
            onUp: devices.htpc.remoteUp('up')
        down:
            onDown: devices.htpc.remoteDown('down')
            onUp: devices.htpc.remoteUp('down')
        left:
            onDown: devices.htpc.remoteDown('left')
            onUp: devices.htpc.remoteUp('left')
        right:
            onDown: devices.htpc.remoteDown('right')
            onUp: devices.htpc.remoteUp('right')
        ok:
            onDown: devices.htpc.remoteDown('select')
            onUp: devices.htpc.remoteUp('select')
        pageUp:
            onDown: devices.htpc.keyDown('pageup')
            onUp: devices.htpc.keyUp('pageup')
        pageDown:
            onDown: devices.htpc.keyDown('pagedown')
            onUp: devices.htpc.keyUp('pagedown')
       
htpcVideo:
    basedOn:
        - htpcBase
    
    events:
        +onActivityBegin: |
            devices.btRemote.setLEDColors('blue', None, None, None, None)
            devices.tcpRemote.setLEDColors('blue', None, None, None, None)
        onActivityBegin+: |
            devices.amp.sceneSelect(1)
            
htpcMusic:
    basedOn:
        - htpcBase
    
    events:
        +onActivityBegin: |
            devices.btRemote.setLEDColors(None, None, None, None, 'blue')
            devices.tcpRemote.setLEDColors(None, None, None, None, 'blue')
        onActivityBegin+: |
            devices.amp.sceneSelect(3)
            
rokuBase:
    basedOn:
        - mainActivityBase

    events:
        onActivityBegin+: |
            devices.amp.sceneSelect(1)
            #devices.amp.inputSelect('Roku')
            devices.mqtt.publish('theaterPlay')
#            if devices.pjlift.state.open:
#                devices.vera.runScene('Theater Play')
        onActivityEnd: |
            devices.mqtt.publish('theaterPause')
#            if devices.pjlift.state.open:
#                devices.vera.runScene('Theater Pause')
    
    buttons:
        
        play: devices.roku.play()
        pause: devices.roku.play()
        forward: devices.roku.forward()
        reverse: devices.roku.reverse()
        previous: devices.roku.replay()
        exit: devices.roku.back()
        info: devices.roku.info()
        delete: devices.roku.options()
        up:
            repeat: 0.15 0.75
            onDown: devices.roku.up()
        down:
            repeat: 0.15 0.75
            onDown: devices.roku.down()
        left:
            repeat: 0.15 0.75
            onDown: devices.roku.left()
        right:
            repeat: 0.15 0.75
            onDown: devices.roku.right()
        ok: devices.roku.select()
            
plex:
    
    basedOn:
        - rokuBase
        
    events:
        +onActivityBegin: |
            devices.btRemote.setLEDColors('blue', None, None, None, None)
            devices.tcpRemote.setLEDColors('blue', None, None, None, None)
        onActivityBegin+: |
            devices.roku.launchApp(13535)
            
netflix:
    
    basedOn:
        - rokuBase
        
    events:
        +onActivityBegin: |
            devices.btRemote.setLEDColors(None, 'blue', None, None, None)
            devices.tcpRemote.setLEDColors(None, 'blue', None, None, None)
        onActivityBegin+: |
            devices.roku.launchApp('Netflix')
            
primeVideo:
    
    basedOn:
        - rokuBase
        
    events:
        +onActivityBegin: |
            devices.btRemote.setLEDColors(None, None, 'blue', None, None)
            devices.tcpRemote.setLEDColors(None, None, 'blue', None, None)
        onActivityBegin+: |
            devices.roku.launchApp('Prime Video')
            
youtubeTV:
    
    basedOn:
        - rokuBase
        
    events:
        +onActivityBegin: |
            devices.btRemote.setLEDColors(None, None, None, 'blue', None)
            devices.tcpRemote.setLEDColors(None, None, None, 'blue', None)
        onActivityBegin+: |
            devices.roku.launchApp('YouTube TV')
            
