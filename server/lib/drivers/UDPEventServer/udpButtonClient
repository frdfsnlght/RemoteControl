#!/usr/bin/env python3

import sys, socket, json, argparse, time

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

def sendButton(button, state):
    send(json.dumps({
        'type': 'button',
        'button': button,
        'state': state
    }))

def send(data):
    sock.sendto(data.encode('utf-8'), (options.address, options.port))

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description = 'Send button events to the UDPEventServer.')
    parser.add_argument('-a', '--address', type = str, default = 'localhost', help = 'the address of the event server, defaults to localhost')
    parser.add_argument('-p', '--port', type = int, default = 1968, help = 'the port of the event server, defaults to 1968')
    parser.add_argument('-k', '--apikey', type = str, help = 'the API key required by the event server')
    parser.add_argument('-t', '--time', type = int, default = 0.1, help = 'the time, in seconds, between the down and up event, defaults to 0.1')
    parser.add_argument('-d', '--down', action = 'store_true', help = 'only send down events')
    parser.add_argument('-u', '--up', action = 'store_true', help = 'only send up events')
    parser.add_argument('button', type = str, nargs='+', help='one or more buttons to send down/up for')
    
    options = parser.parse_args()

    for b in options.button:
        if options.down or not options.up:
            sendButton(b, 'down')
        if not options.down and not options.up:
            time.sleep(options.time)
        if options.up or not options.down:
            sendButton(b, 'up')
